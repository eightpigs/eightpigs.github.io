<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Devlang on 八只猪</title><link>https://eightpigs.io/categories/devlang/</link><description>Recent content in Devlang on 八只猪</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 11 Jun 2021 12:30:00 +0800</lastBuildDate><atom:link href="https://eightpigs.io/categories/devlang/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA 虚拟机栈</title><link>https://eightpigs.io/2018/08/10/java_virtual_machine_stack/</link><pubDate>Fri, 10 Aug 2018 21:21:00 +0000</pubDate><guid>https://eightpigs.io/2018/08/10/java_virtual_machine_stack/</guid><description>&lt;h2 id="概念"&gt;概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JVM 虚拟机栈与程序计数器和[本地方法栈]一样都是线程私有的。&lt;/li&gt;
&lt;li&gt;栈帧可以理解为一个方法的运行空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="栈帧stack-frame"&gt;栈帧（Stack Frame）&lt;/h2&gt;
&lt;p&gt;栈帧是&lt;strong&gt;用于支持虚拟机进行方法调用和方法执行的数据结构&lt;/strong&gt;。每个方法从调用至执行完成的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。&lt;/p&gt;</description></item><item><title>Groovy 基础 - 语法</title><link>https://eightpigs.io/2018/04/12/groovy-grammar/</link><pubDate>Thu, 12 Apr 2018 23:04:00 +0000</pubDate><guid>https://eightpigs.io/2018/04/12/groovy-grammar/</guid><description>&lt;h2 id="介绍"&gt;介绍&lt;/h2&gt;
&lt;p&gt;Groovy&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;is an agile and dynamic language for the Java Virtual Machine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;builds upon the strengths of Java but has additional power features inspired by languages like Python, Ruby and Smalltalk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;makes modern programming features available to Java developers with almost-zero learning curve&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provides the ability to statically type check and statically compile your code for robustness and performance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;supports Domain-Specific Languages and other compact syntax so your code becomes easy to read and maintain&lt;/p&gt;</description></item><item><title>Go语言学习 - 复合数据类型：数组、slice</title><link>https://eightpigs.io/2018/03/19/go_notes_array_and_slice/</link><pubDate>Mon, 19 Mar 2018 14:26:00 +0000</pubDate><guid>https://eightpigs.io/2018/03/19/go_notes_array_and_slice/</guid><description>&lt;h1 id="复合数据类型"&gt;复合数据类型&lt;/h1&gt;
&lt;p&gt;主要分为4种复合数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;slice&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;结构体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次先将数组和slice的相关知识点及理解记录下来，后续再慢慢看Map和结构体。&lt;/p&gt;
&lt;h2 id="数组"&gt;数组&lt;/h2&gt;
&lt;p&gt;数组是具有固定长度且拥有零个或多个相同数据类型元素的序列。由于数组的长度固定，所以在Go里面很少直接使用。&lt;/p&gt;</description></item><item><title>Go学习笔记 - 基本结构</title><link>https://eightpigs.io/2018/02/10/go_notes_basic_structure/</link><pubDate>Sat, 10 Feb 2018 17:15:00 +0000</pubDate><guid>https://eightpigs.io/2018/02/10/go_notes_basic_structure/</guid><description>&lt;h2 id="基本结构"&gt;基本结构&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-Go"&gt;package main

import &amp;quot;fmt&amp;quot;

// 变量

// 函数
func main(){
 fmt.Println(&amp;quot;Hello Go&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;每一个.go的文件以&lt;strong&gt;package&lt;/strong&gt;声明开头，表名文件属于哪个包&lt;/li&gt;
&lt;li&gt;package 声明后面是import声明&lt;/li&gt;
&lt;li&gt;然后是&lt;strong&gt;包级别&lt;/strong&gt;的类型、变量、常量、函数的声明，不区分顺序&lt;/li&gt;
&lt;li&gt;main函数代表入口函数，固定写法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="名称规范"&gt;名称规范&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;名称的开头是一个字母（Unicode 中的字符即可）或下划线，后面可以跟任意数量的字符、数字和下划线，并区分大小写&lt;/li&gt;
&lt;li&gt;名称以大写字母开头，是可以被外部使用的（导出），意味着对包外是可见和可访问的&lt;/li&gt;
&lt;li&gt;采用“驼峰式”风格命名，而不是下划线。&lt;/li&gt;
&lt;li&gt;有25个关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;break default func interface select
case defer go map struct
chan else goto package switch
const if range type fallthrough
contine for import return var
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="变量"&gt;变量&lt;/h2&gt;
&lt;h3 id="声明"&gt;声明&lt;/h3&gt;
&lt;p&gt;使用关键字var声明变量。&lt;/p&gt;</description></item></channel></rss>