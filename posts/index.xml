<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 八只猪</title><link>https://eightpigs.io/posts/</link><description>Recent content in Posts on 八只猪</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 30 Jun 2023 20:30:00 +0800</lastBuildDate><atom:link href="https://eightpigs.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 /dev/tcp 发起网络请求</title><link>https://eightpigs.io/2023/06/30/use_dev_tcp_send_http_request/</link><pubDate>Fri, 30 Jun 2023 20:30:00 +0800</pubDate><guid>https://eightpigs.io/2023/06/30/use_dev_tcp_send_http_request/</guid><description>&lt;p&gt;今天对 Homelab 中跑的一些存在隐私数据的服务添加 &lt;strong&gt;禁止访问互联网&lt;/strong&gt; 的隐私策略来提高安全性。但大部分镜像都采用最小化方式打包的，没有常见的 ping, curl, wget, telnet 等网络工具来测试网络访问情况。&lt;/p&gt;</description></item><item><title>为内网 Homelab 创建 CA 证书和通配符证书</title><link>https://eightpigs.io/2023/06/20/create_ca_certificate_for_homelab/</link><pubDate>Tue, 20 Jun 2023 20:00:00 +0800</pubDate><guid>https://eightpigs.io/2023/06/20/create_ca_certificate_for_homelab/</guid><description>&lt;p&gt;家里 Homelab 使用了 Let&amp;rsquo;s Encrypt 的通配符证书提供外网的 HTTPS 访问，内网则是使用 HTTP 或者 IP 直接访问。最近把 Homelab 的外网完全关闭了，通过 VPN 回家以提高安全性。&lt;/p&gt;
&lt;p&gt;当全切回内网后，Bitwarden iOS 客户端无法正常使用，在登录时会提示错误。大概原因是 &lt;a href="https://developer.apple.com/documentation/security/preventing_insecure_network_connections"&gt;Apple 会禁止使用不安全的连接&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>迁移 Gitea 到 Gitea-rootless</title><link>https://eightpigs.io/2022/03/28/migrate_gitea_to_rootless/</link><pubDate>Mon, 28 Mar 2022 20:30:00 +0800</pubDate><guid>https://eightpigs.io/2022/03/28/migrate_gitea_to_rootless/</guid><description>&lt;p&gt;最近重新配置过一遍 Homelab 环境（PVE、NFS、Kubernetes），粗略检查各个自建服务的 Web 访问后迁移工作就告一段落了。直到今天提交代码到 Gitea 时出现 SSH 无法访问，排查后得知是因为无权限读取 keys 导致 SSH 服务启动失败：&lt;/p&gt;</description></item><item><title>PVE 直通网卡</title><link>https://eightpigs.io/2022/03/20/pve_passthrough_network/</link><pubDate>Sun, 20 Mar 2022 10:30:00 +0800</pubDate><guid>https://eightpigs.io/2022/03/20/pve_passthrough_network/</guid><description>&lt;p&gt;今天梳理并重新配置了一遍机器及虚拟机，对 &lt;code&gt;Supermicro X10DRL-i&lt;/code&gt; 主板的2个可用网口进行了调整：从原来直通给 Dev（开发环境虚拟机），更换到直通给 TrueNAS，本文简单记录了定位网卡和直通的过程。&lt;/p&gt;</description></item><item><title>K3s 上手 - NFS 存储配置</title><link>https://eightpigs.io/2021/08/27/k3s_use_nfs/</link><pubDate>Fri, 27 Aug 2021 16:30:00 +0800</pubDate><guid>https://eightpigs.io/2021/08/27/k3s_use_nfs/</guid><description>&lt;p&gt;在上一篇文章&lt;a href="https://eightpigs.io/2021/07/06/using_k3s/"&gt;《K3s 上手 - 集群搭建》&lt;/a&gt; 我有提到容器的所有数据存储均使用 NFS：在我的 TrueNAS 有一块 1T SSD 作为容器数据的专用硬盘，并通过 NFS 共享给 K3s。本文分享下 TrueNAS 的配置及 K3s 使用 NFS 的方式。&lt;/p&gt;</description></item><item><title>K3s 上手 - 集群搭建</title><link>https://eightpigs.io/2021/07/06/using_k3s/</link><pubDate>Tue, 06 Jul 2021 12:30:00 +0800</pubDate><guid>https://eightpigs.io/2021/07/06/using_k3s/</guid><description>&lt;p&gt;在&lt;a href="https://eightpigs.io/2021/07/05/pve_10g_nic/"&gt;《PVE 中虚拟化万兆网卡》&lt;/a&gt;中我有提到自己攒了台双路的机器放在家里，长期以来作为我远程的 Power 机器，在上面用 Docker-Compose 跑我的各种服务。从攒好机器到现在，反复多次搭建 Kubernetes，最终都放弃了：&lt;strong&gt;上手成本的确高&lt;/strong&gt;。&lt;/p&gt;</description></item><item><title>PVE 中虚拟化万兆网卡</title><link>https://eightpigs.io/2021/07/05/pve_10g_nic/</link><pubDate>Mon, 05 Jul 2021 12:30:00 +0800</pubDate><guid>https://eightpigs.io/2021/07/05/pve_10g_nic/</guid><description>&lt;p&gt;去年自己攒了一台 &lt;code&gt;E5 2680v4 * 2, 16G RECC * 8&lt;/code&gt; 的机器，一开始主要作为远程开发机 &amp;amp; Docker-Compose。
最近跑 k3s 集群并把 Docker-Compose 的服务迁到 k3s 上，于是重新规划系统资源，本文记录在搭建过程中关于在PVE中网络的配置。&lt;/p&gt;</description></item><item><title>Gitlab API 自动拉取有权限的所有仓库</title><link>https://eightpigs.io/2021/06/10/quick_pull_gitlab_repos/</link><pubDate>Thu, 10 Jun 2021 18:37:00 +0800</pubDate><guid>https://eightpigs.io/2021/06/10/quick_pull_gitlab_repos/</guid><description>&lt;p&gt;Gitlab 提供了完善的 HTTP API 来获取分组、项目信息。&lt;/p&gt;
&lt;h3 id="api-信息"&gt;API 信息&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;获取分组: &lt;code&gt;GET /api/v4/groups&lt;/code&gt; &lt;a href="https://docs.gitlab.com/ee/api/groups.html#list-groups"&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;获取分组下的项目: &lt;code&gt;GET /api/v4/groups/:id/projects&lt;/code&gt; &lt;a href="https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects"&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="依赖"&gt;依赖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;jq: &lt;a href="https://stedolan.github.io/jq/download/"&gt;安装jq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="脚本"&gt;脚本&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;获取分组列表&lt;/li&gt;
&lt;li&gt;依次获取每个分组下的有权限的所有仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;暂不支持翻页: 若分组超过100或者分组下的项目超过100个，则会被忽略。&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>选购钻石的基本知识</title><link>https://eightpigs.io/2020/10/17/diamond/</link><pubDate>Sat, 17 Oct 2020 10:00:00 +0800</pubDate><guid>https://eightpigs.io/2020/10/17/diamond/</guid><description>&lt;p&gt;一直以来我都有买东西看详细参数的习惯，最近开始选购钻戒，所以就学习并记录了选择钻石的基本知识，当然了，品质很重要，钱包更重要，买钻戒怕是没法做加钱党了&amp;hellip;&lt;/p&gt;</description></item><item><title>两人一机的搭建方案</title><link>https://eightpigs.io/2019/12/15/two_people_use_one_machine/</link><pubDate>Sun, 15 Dec 2019 14:30:00 +0800</pubDate><guid>https://eightpigs.io/2019/12/15/two_people_use_one_machine/</guid><description>&lt;h2 id="动机"&gt;动机&lt;/h2&gt;
&lt;p&gt;家里的台式机装了双系统: Windows / Archlinux，使用&lt;a href="https://wiki.archlinux.org/index.php/REFInd"&gt;rEFInd&lt;/a&gt;在开机时选择要启动的系统。因笔记本长时间放公司且女友总占用电脑，遂萌生了搭建多人一机的想法（不可否认有&lt;del&gt;Linus&lt;/del&gt;白嫖王的影响）。&lt;/p&gt;
&lt;h2 id="方案"&gt;方案&lt;/h2&gt;
&lt;p&gt;除CPU和主板外其余设备完全独立: 基于&lt;a href="https://pve.proxmox.com/wiki/Main_Page"&gt;Proxmox Virtual Environment(PVE)&lt;/a&gt;虚拟化并为两个不同的系统直通硬盘、显卡、鼠标、键盘等外设，以达到完全独立的配置。&lt;/p&gt;</description></item><item><title>简单谈谈VIM设计的优点</title><link>https://eightpigs.io/2019/03/12/vim_vim_vim/</link><pubDate>Tue, 12 Mar 2019 23:00:00 +0000</pubDate><guid>https://eightpigs.io/2019/03/12/vim_vim_vim/</guid><description>&lt;p&gt;我接触VIM的时间较短，从正式学习到现在也就一年半不到的时间，期间我将所有使用到的编辑器、IDE的键位都修改为了VIM模式，这对我快速掌握VIM很有帮助（相当于强行适应+学习）。&lt;/p&gt;</description></item><item><title>常见的统一标识符算法（UUID、NUID、Snowflake）</title><link>https://eightpigs.io/2019/02/28/unique_identifier/</link><pubDate>Thu, 28 Feb 2019 20:52:00 +0000</pubDate><guid>https://eightpigs.io/2019/02/28/unique_identifier/</guid><description>&lt;p&gt;在日常开发过程中，肯定少不了接触“统一标识符”，一般我们都直接使用各个语言标准库中的实现，例如在Java中可以使用&lt;code&gt;java.util.UUID.randomUUID()&lt;/code&gt;来获取。使用UUID的场景各不相同，那该怎么选择统一标识符算法呢？&lt;/p&gt;</description></item><item><title>使用Drone进行持续集成</title><link>https://eightpigs.io/2019/02/23/upgrade_drone/</link><pubDate>Sat, 23 Feb 2019 17:48:00 +0000</pubDate><guid>https://eightpigs.io/2019/02/23/upgrade_drone/</guid><description>&lt;h2 id="介绍"&gt;介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Drone is a Container-Native, Continuous Delivery Platform.
Drone 是一个基于容器的持续交付平台。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="工作原理"&gt;工作原理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过Web Hook接受相关事件（推送、创建分支、合并请求等&amp;hellip;)&lt;/li&gt;
&lt;li&gt;读取并执行该仓库根目录下的.drone.yaml文件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="特性"&gt;特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;支持多种仓库类型（GitHub, GitLab, Gitea, Gogs, Bitbucket Cloud, Bitbucket Server）&lt;/li&gt;
&lt;li&gt;支持插件&lt;/li&gt;
&lt;li&gt;支持分布式构建&lt;/li&gt;
&lt;li&gt;支持多操作系统构建&lt;/li&gt;
&lt;li&gt;基于Docker&lt;/li&gt;
&lt;li&gt;基于Go语言&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="安装"&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://cloud.drone.io/drone/hello-world"&gt;Demo 地址&lt;/a&gt;&lt;/p&gt;</description></item><item><title>排序算法 - 选择、冒泡、插入、快排、希尔、归并、堆</title><link>https://eightpigs.io/2019/02/23/sort_algorithm/</link><pubDate>Sat, 23 Feb 2019 13:38:00 +0000</pubDate><guid>https://eightpigs.io/2019/02/23/sort_algorithm/</guid><description>&lt;p&gt;在编码过程中肯定少不了对数据进行排序，通常做法是使用标准库的实现、使用熟悉的排序算法或直接网上扒一个排序算法，然而却对排序算法的特点和适应场景了解得非常少。本文将从代码实现和不同量级数据的测试两个角度来说说各个排序算法。&lt;/p&gt;</description></item><item><title>JAVA 虚拟机栈</title><link>https://eightpigs.io/2018/08/10/java_virtual_machine_stack/</link><pubDate>Fri, 10 Aug 2018 21:21:00 +0000</pubDate><guid>https://eightpigs.io/2018/08/10/java_virtual_machine_stack/</guid><description>&lt;h2 id="概念"&gt;概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JVM 虚拟机栈与程序计数器和[本地方法栈]一样都是线程私有的。&lt;/li&gt;
&lt;li&gt;栈帧可以理解为一个方法的运行空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="栈帧stack-frame"&gt;栈帧（Stack Frame）&lt;/h2&gt;
&lt;p&gt;栈帧是&lt;strong&gt;用于支持虚拟机进行方法调用和方法执行的数据结构&lt;/strong&gt;。每个方法从调用至执行完成的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。&lt;/p&gt;</description></item><item><title>自建家用NAS记录 - 硬件篇</title><link>https://eightpigs.io/2018/08/10/create_yourself_nas/</link><pubDate>Fri, 10 Aug 2018 21:21:00 +0000</pubDate><guid>https://eightpigs.io/2018/08/10/create_yourself_nas/</guid><description>&lt;h2 id="缘由"&gt;缘由&lt;/h2&gt;
&lt;p&gt;NAS是种草很久了，迟迟没下手的原因是还差一根“稻草”。终于最近自己乞丐版的 MBP 15 用起来硬盘有些吃紧&amp;hellip;&lt;/p&gt;
&lt;h2 id="作用"&gt;作用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文档存储&lt;/li&gt;
&lt;li&gt;下载机&lt;/li&gt;
&lt;li&gt;TimeMachine&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="准备"&gt;准备&lt;/h2&gt;
&lt;p&gt;看了不少关于NAS的帖子，有推荐群辉、万由等一系列完善的商业产品，也有推荐自建NAS上黑群辉或者FreeNAS。从自身喜欢折腾的情况出发，还是决定自建NAS，满足我的折腾欲。&lt;/p&gt;</description></item><item><title>在 MacOS 和 Windows 上的效率工具</title><link>https://eightpigs.io/2018/04/20/efficiency_tools_on_macos_and_windows/</link><pubDate>Fri, 20 Apr 2018 10:14:00 +0000</pubDate><guid>https://eightpigs.io/2018/04/20/efficiency_tools_on_macos_and_windows/</guid><description>&lt;h2 id="终端模拟器"&gt;终端模拟器&lt;/h2&gt;
&lt;h5 id="windows"&gt;Windows&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cmder.net/"&gt;Cmder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E9%80%82%E7%94%A8%E4%BA%8E_Linux_%E7%9A%84_Windows_%E5%AD%90%E7%B3%BB%E7%BB%9F"&gt;WSL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hyper.is/"&gt;Hyper&lt;/a&gt;(Electron)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="macos"&gt;MacOS&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.iterm2.com/"&gt;Iterm2&lt;/a&gt; + &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;zsh(oh-my-zsh)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hyper.is/"&gt;Hyper&lt;/a&gt;(Electron)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="查找"&gt;查找&lt;/h2&gt;
&lt;h5 id="windows-1"&gt;Windows&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xbeta.info/everything-search-tool.htm"&gt;Everything&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="macos-1"&gt;MacOS&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wellsnake.com/jekyll/update/2014/06/15/001/"&gt;Alfred&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/peida/archive/2012/11/16/2773289.html"&gt;Shell Command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="快速启动"&gt;快速启动&lt;/h2&gt;
&lt;h5 id="windows-2"&gt;Windows&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xuanwo.org/2015/07/28/listary/"&gt;Listary&lt;/a&gt; (可以配合EveryThing）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wox.one/"&gt;Wox&lt;/a&gt;（插件多）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="macos-2"&gt;MacOS&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wellsnake.com/jekyll/update/2014/06/15/001/"&gt;Alfred&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="快捷键自动化"&gt;快捷键（自动化）&lt;/h2&gt;
&lt;h5 id="windows-3"&gt;Windows&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://xbeta.info/tag/ahk"&gt;AHK&lt;/a&gt; （AutoHotKey）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="macos-3"&gt;MacOS&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ashfinal/awesome-hammerspoon"&gt;Hammerspoon&lt;/a&gt; (Lua脚本)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sspai.com/post/36442"&gt;Keyboard Maestro&lt;/a&gt;（快捷键 + 自动化）&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>腾讯视频客户端（MacOS）缓存文件合成/导出</title><link>https://eightpigs.io/2018/04/14/tencent_video_cache_file_to_mp4_in_macos/</link><pubDate>Sat, 14 Apr 2018 13:02:00 +0000</pubDate><guid>https://eightpigs.io/2018/04/14/tencent_video_cache_file_to_mp4_in_macos/</guid><description>&lt;p&gt;年会时抽奖中了一个极米投影仪，现在看片大多都使用投影仪来播放。我是开通了腾讯视频的会员，但是因为腾讯视频有 TV 版的缘故，其他版本没有给开放投屏功能。那么这就很尴尬了，TV 版会员太贵并且也没必要买，普通客户端不支持投屏并且缓存的资源也不是一个正常可以直接用其他播放器观看的格式。&lt;/p&gt;</description></item><item><title>Groovy 基础 - 语法</title><link>https://eightpigs.io/2018/04/12/groovy-grammar/</link><pubDate>Thu, 12 Apr 2018 23:04:00 +0000</pubDate><guid>https://eightpigs.io/2018/04/12/groovy-grammar/</guid><description>&lt;h2 id="介绍"&gt;介绍&lt;/h2&gt;
&lt;p&gt;Groovy&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;is an agile and dynamic language for the Java Virtual Machine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;builds upon the strengths of Java but has additional power features inspired by languages like Python, Ruby and Smalltalk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;makes modern programming features available to Java developers with almost-zero learning curve&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provides the ability to statically type check and statically compile your code for robustness and performance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;supports Domain-Specific Languages and other compact syntax so your code becomes easy to read and maintain&lt;/p&gt;</description></item><item><title>Go语言学习 - 复合数据类型：数组、slice</title><link>https://eightpigs.io/2018/03/19/go_notes_array_and_slice/</link><pubDate>Mon, 19 Mar 2018 14:26:00 +0000</pubDate><guid>https://eightpigs.io/2018/03/19/go_notes_array_and_slice/</guid><description>&lt;h1 id="复合数据类型"&gt;复合数据类型&lt;/h1&gt;
&lt;p&gt;主要分为4种复合数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;slice&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;结构体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次先将数组和slice的相关知识点及理解记录下来，后续再慢慢看Map和结构体。&lt;/p&gt;
&lt;h2 id="数组"&gt;数组&lt;/h2&gt;
&lt;p&gt;数组是具有固定长度且拥有零个或多个相同数据类型元素的序列。由于数组的长度固定，所以在Go里面很少直接使用。&lt;/p&gt;</description></item><item><title>Go学习笔记 - 基本结构</title><link>https://eightpigs.io/2018/02/10/go_notes_basic_structure/</link><pubDate>Sat, 10 Feb 2018 17:15:00 +0000</pubDate><guid>https://eightpigs.io/2018/02/10/go_notes_basic_structure/</guid><description>&lt;h2 id="基本结构"&gt;基本结构&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-Go"&gt;package main

import &amp;quot;fmt&amp;quot;

// 变量

// 函数
func main(){
 fmt.Println(&amp;quot;Hello Go&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;每一个.go的文件以&lt;strong&gt;package&lt;/strong&gt;声明开头，表名文件属于哪个包&lt;/li&gt;
&lt;li&gt;package 声明后面是import声明&lt;/li&gt;
&lt;li&gt;然后是&lt;strong&gt;包级别&lt;/strong&gt;的类型、变量、常量、函数的声明，不区分顺序&lt;/li&gt;
&lt;li&gt;main函数代表入口函数，固定写法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="名称规范"&gt;名称规范&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;名称的开头是一个字母（Unicode 中的字符即可）或下划线，后面可以跟任意数量的字符、数字和下划线，并区分大小写&lt;/li&gt;
&lt;li&gt;名称以大写字母开头，是可以被外部使用的（导出），意味着对包外是可见和可访问的&lt;/li&gt;
&lt;li&gt;采用“驼峰式”风格命名，而不是下划线。&lt;/li&gt;
&lt;li&gt;有25个关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;break default func interface select
case defer go map struct
chan else goto package switch
const if range type fallthrough
contine for import return var
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="变量"&gt;变量&lt;/h2&gt;
&lt;h3 id="声明"&gt;声明&lt;/h3&gt;
&lt;p&gt;使用关键字var声明变量。&lt;/p&gt;</description></item><item><title>Vim 基础使用</title><link>https://eightpigs.io/2018/02/04/vim_basic/</link><pubDate>Sun, 04 Feb 2018 13:29:00 +0000</pubDate><guid>https://eightpigs.io/2018/02/04/vim_basic/</guid><description>&lt;p&gt;接触 Vim 快一个月了，喜欢上了 Vim 多模式操作的特性。&lt;/p&gt;
&lt;p&gt;在艰难地适应 Vim 后（其他开发工具使用插件模拟 Vim 键位），效率有明显的提高。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rtorr/vim-cheat-sheet"&gt;Vim 快捷键文字版&lt;/a&gt;
&lt;a href="http://cenalulu.github.io/linux/all-vim-cheatsheat/"&gt;Vim 快捷键图，多个版本&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Spring Colud 之 统一配置中心</title><link>https://eightpigs.io/2017/12/29/spring_cloud_config_server/</link><pubDate>Fri, 29 Dec 2017 19:40:00 +0000</pubDate><guid>https://eightpigs.io/2017/12/29/spring_cloud_config_server/</guid><description>&lt;p&gt;在我们Java项目开发过程中，对于配置文件的多环境配置一般会采用以下方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用maven等构建工具基于resources自定义多环境&lt;/li&gt;
&lt;li&gt;使用市面上开源的统一配置中心，例如百度的disconf、淘宝的Diamond等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么本文将讲述第二个方案中一个能为任何项目提供统一配置的管理方式：Spring Cloud Config。&lt;/p&gt;</description></item><item><title>centos 编译安装mysql 5.6</title><link>https://eightpigs.io/2016/02/05/compiled_mysql_on_centos/</link><pubDate>Fri, 05 Feb 2016 11:55:00 +0000</pubDate><guid>https://eightpigs.io/2016/02/05/compiled_mysql_on_centos/</guid><description>&lt;h2 id="1-检测mysql"&gt;1. 检测mysql&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;rpm -qa | grep mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果有的话 , 执行以下命令卸载&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;rpm -e mysql //普通删除模式
rpm -e --nodeps mysql // 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="2-安装依赖"&gt;2. 安装依赖&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;yum -y install make gcc-c++ cmake bison-devel ncurses-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="3-下载mysql-源码"&gt;3. 下载mysql 源码&lt;/h2&gt;
&lt;p&gt;进入 &lt;a href="ftp://mirror.switch.ch/mirror/mysql/Downloads/MySQL-5.6/"&gt;mysql 5.6 下载地址&lt;/a&gt; , 找到 &amp;ldquo;mysql-5.6.xx.tar.gz&amp;rdquo; , 我目前下载的是&lt;a href="ftp://mirror.switch.ch/mirror/mysql/Downloads/MySQL-5.6/mysql-5.6.28.tar.gz"&gt;5.6.28&lt;/a&gt;&lt;/p&gt;</description></item><item><title>C# 写的 Windows 下快捷管理VPN工具</title><link>https://eightpigs.io/2015/07/23/windows_vpn_tools_by_csharp/</link><pubDate>Thu, 23 Jul 2015 06:14:00 +0000</pubDate><guid>https://eightpigs.io/2015/07/23/windows_vpn_tools_by_csharp/</guid><description>&lt;h2 id="简介"&gt;简介&lt;/h2&gt;
&lt;p&gt;使用 C# 写的 Windows 下快捷管理 VPN 工具，可以实现对本地 VPN 的增加,修改,删除管理&lt;/p&gt;
&lt;h2 id="原理"&gt;原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows 有自带的连接管理工具 rasphone ,可以实现对链接进行新建/修改/连接/删除/断开等操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在cmd 输入 : &lt;strong&gt;rasphone /?&lt;/strong&gt; 就可以查看所有命令操作信息&lt;/p&gt;</description></item><item><title>豆瓣FM第三方客户端</title><link>https://eightpigs.io/2014/11/10/doubanfm_third_party_client/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://eightpigs.io/2014/11/10/doubanfm_third_party_client/</guid><description>&lt;h2 id="更新说明"&gt;更新说明&lt;/h2&gt;
&lt;p&gt;2018-03-15：该代码在14年下半年完成，所以略丑陋。已经转网易云音乐多年了，如果有人在使用本客户端或想使用，可以给我提issues，会花时间重构代码。&lt;/p&gt;</description></item></channel></rss>